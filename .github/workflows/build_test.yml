name: CI
on:
  pull_request_target:
    types:
      - labeled
      - opened
      - synchronize
      - reopened
    branches:
      - main
      - '*-release'
    paths-ignore:
      - 'config/**'
      - '**.md'
  # push: # TODO: use if conditionals to separate PR from refs/tag for some steps; execute this WF BEFORE the releaese workflow
  #   tags:
  #     - '*'

jobs:
  authorize:
    if: ${{ contains( github.event.pull_request.labels.*.name, 'test e2e') }}
    environment:
      ${{ (github.event_name == 'pull_request_target' &&
      github.event.pull_request.head.repo.full_name != github.repository) && 'external' || 'internal' }}
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    outputs:
      config: ${{ steps.get_config.outputs.config }}
      public_repo: ${{ steps.get_config.outputs.public_repo }}
    steps:
      - name: Get Testing Configuration
        id: get_config
        run: |
          config=$(gh api "/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/approvals" --jq '.[0] | .comment')
          if [ -z "$config" ]; then
            exit 0
          fi

          echo "Provided testing configuration:"
          echo "$config"
          if ! echo "$config" | yq e > /dev/null; then
            echo "Invalid testing configuration provided"
            exit 1
          fi
          echo "config=$(echo -n "$config" | base64 -w 0)" >> "$GITHUB_OUTPUT"
          if echo "$config" | yq e '... comments=""' | grep -q "hosted"; then
            echo "Hosted cluster deployment was triggered. Using public repository"
            echo "public_repo=true" >> "$GITHUB_OUTPUT"
          fi

  lint-test:
    concurrency:
      group: lint-test-${{ github.head_ref || github.run_id }}
      cancel-in-progress: true
    name: Lint and Unit Test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.vars.outputs.version }}
      clusterprefix: ${{ steps.vars.outputs.clusterprefix }}
      pr_merge_commit: ${{ fromJSON(steps.pr.outputs.result) }}
    steps:
      - name: Get PR ref
        uses: actions/github-script@v7
        id: pr
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              ...context.repo,
              pull_number: context.payload.pull_request.number,
            });
            return pullRequest.merge_commit_sha;

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ fromJSON(steps.pr.outputs.result) }}
          fetch-depth: 0

      - name: Validate PR title and commit message
        shell: bash
        run: |
          set -euo pipefail

          # Conventional commit regex (simplified)
          CONVENTIONAL_REGEX='^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\([a-zA-Z0-9_-]+\))??!?:.+$'

          pr_title="${{ github.event.pull_request.title }}"
          echo "PR title: $pr_title"

          commit_title="$(git log -2 --pretty=%s | tail -n 1)"
          echo "Commit title: $commit_title"

          if [[ ! "$pr_title" =~ $CONVENTIONAL_REGEX ]]; then
            echo "::error::PR title does not follow Conventional Commits format: https://www.conventionalcommits.org/"
            exit 1
          fi

          if [[ ! "$commit_title" =~ $CONVENTIONAL_REGEX ]]; then
            echo "::error::Commit message does not follow Conventional Commits format: https://www.conventionalcommits.org/"
            exit 1
          fi

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: false

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/.cache/golangci-lint
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Lint
        run: GOLANGCI_LINT_TIMEOUT=10m make lint

      - name: Verify all generated pieces are up-to-date
        shell: bash
        run: |
          make BASE_COMMIT=origin/main generate-all
          git add -N .
          if ! git diff --exit-code; then
            echo "::error::Generated files are out of date. Please run 'make generate-all'."
            git diff --name-only
            exit 1
          fi

      - name: Unit tests
        run: |
          make test

      - name: Get outputs
        id: vars
        run: |
          GIT_VERSION=$(git describe --tags --always)
          echo "version=${GIT_VERSION:1}" >> "$GITHUB_OUTPUT"
          echo "clusterprefix=ci-$(date +%s | cut -b6-10)" >> "$GITHUB_OUTPUT"

  controller-e2etest:
    name: E2E Controller
    runs-on: ubuntu-latest
    if: ${{ !contains( github.event.pull_request.labels.*.name, 'test e2e') }}
    needs: lint-test
    concurrency:
      group: controller-${{ github.head_ref || github.run_id }}
      cancel-in-progress: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.lint-test.outputs.pr_merge_commit }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: false

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run E2E tests
        env:
          GINKGO_LABEL_FILTER: 'controller'
          CLUSTER_DEPLOYMENT_PREFIX: ${{ needs.lint-test.outputs.clusterprefix }}
          VERSION: ${{ needs.lint-test.outputs.version }}
        run: |
          make test-e2e

      - name: Archive test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: support-bundles
          path: |
            *.tar.gz

  push-public:
    name: Build and Push Artifacts When Required
    runs-on: ubuntu-latest
    needs:
       - authorize
       - lint-test
    concurrency:
      group: build-${{ github.head_ref || github.run_id }}
      cancel-in-progress: true
    permissions:
      packages: write
    env:
      REGISTRY_REPO: oci://ghcr.io/k0rdent/kcm/charts-ci
    steps:
      - name: Checkout repository
        if: ${{ needs.authorize.outputs.public_repo == 'true' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.lint-test.outputs.pr_merge_commit }}

      - name: Set up Buildx
        if: ${{ needs.authorize.outputs.public_repo == 'true' }}
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        if: ${{ needs.authorize.outputs.public_repo == 'true' }}
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Go modules
        if: ${{ needs.authorize.outputs.public_repo == 'true' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build and push KCM controller image to the public repository
        if: ${{ needs.authorize.outputs.public_repo == 'true' }}
        uses: goreleaser/goreleaser-action@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REGISTRY: ghcr.io/k0rdent/kcm
          IMAGE_NAME: controller-ci
          VERSION: ${{ needs.lint-test.outputs.version }}
          SKIP_SCM_RELEASE: true
          # SKIP_ARM: true
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean --verbose --skip=validate

      - name: Prepare and push KCM template charts to the public repository
        if: ${{ needs.authorize.outputs.public_repo == 'true' }}
        shell: bash
        run: |
          make kcm-chart-release
          make helm-push

  provider-cloud-e2etest:
    name: E2E Cloud Providers
    runs-on: ubuntu-latest
    if: ${{ contains( github.event.pull_request.labels.*.name, 'test e2e') }}
    needs:
      - lint-test
      - authorize
      - push-public
    concurrency:
      group: cloud-${{ github.head_ref || github.run_id }}
      cancel-in-progress: true
    env:
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: ${{ secrets.CI_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.CI_AWS_SECRET_ACCESS_KEY }}
      AZURE_REGION: westus2
      AZURE_SUBSCRIPTION_ID: ${{ secrets.CI_AZURE_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID: ${{ secrets.CI_AZURE_TENANT_ID }}
      AZURE_CLIENT_ID: ${{ secrets.CI_AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.CI_AZURE_CLIENT_SECRET }}
      GCP_B64ENCODED_CREDENTIALS: ${{ secrets.CI_GCP_B64ENCODED_CREDENTIALS }}
      GCP_PROJECT: k0rdent-ci
      GCP_REGION: us-east4
      PUBLIC_REPO: ${{ needs.authorize.outputs.public_repo == 'true' }}
    steps:
      - name: Set public registry env variables
        if: ${{ env.PUBLIC_REPO == 'true' }}
        run: |
          echo "REGISTRY_REPO=oci://ghcr.io/k0rdent/kcm/charts-ci" >> $GITHUB_ENV
          echo "IMG=ghcr.io/k0rdent/kcm/controller-ci:${{ needs.lint-test.outputs.version }}" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.lint-test.outputs.pr_merge_commit }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: false

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4

      - name: Load testing configuration
        if: ${{ needs.authorize.outputs.config != '' }}
        run: |
          echo -n "${{ needs.authorize.outputs.config }}" | base64 -d > test/e2e/config/config.yaml
          echo "Testing configuration was overwritten:"
          cat test/e2e/config/config.yaml

      - name: Run E2E tests
        env:
          GINKGO_LABEL_FILTER: 'provider:cloud'
          CLUSTER_DEPLOYMENT_PREFIX: ${{ needs.lint-test.outputs.clusterprefix }}
          VERSION: ${{ needs.lint-test.outputs.version }}
        run: |
          make test-e2e
      - name: Archive test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: support-bundles
          path: |
            *.tar.gz

  provider-onprem-e2etest:
    name: E2E On-Prem Providers
    runs-on: self-hosted
    if: ${{ contains( github.event.pull_request.labels.*.name, 'test e2e') }}
    needs:
      - lint-test
      - authorize
      - push-public
    concurrency:
      group: onprem-${{ github.head_ref || github.run_id }}
      cancel-in-progress: true
    env:
      VSPHERE_USER: ${{ secrets.CI_VSPHERE_USER }}
      VSPHERE_PASSWORD: ${{ secrets.CI_VSPHERE_PASSWORD }}
      VSPHERE_SERVER: ${{ secrets.CI_VSPHERE_SERVER }}
      VSPHERE_THUMBPRINT: ${{ secrets.CI_VSPHERE_THUMBPRINT }}
      VSPHERE_DATACENTER: ${{ secrets.CI_VSPHERE_DATACENTER }}
      VSPHERE_DATASTORE: ${{ secrets.CI_VSPHERE_DATASTORE }}
      VSPHERE_RESOURCEPOOL: ${{ secrets.CI_VSPHERE_RESOURCEPOOL }}
      VSPHERE_FOLDER: ${{ secrets.CI_VSPHERE_FOLDER }}
      VSPHERE_CONTROL_PLANE_ENDPOINT: ${{ secrets.CI_VSPHERE_CONTROL_PLANE_ENDPOINT }}
      VSPHERE_VM_TEMPLATE: ${{ secrets.CI_VSPHERE_VM_TEMPLATE }}
      VSPHERE_NETWORK: ${{ secrets.CI_VSPHERE_NETWORK }}
      VSPHERE_SSH_KEY: ${{ secrets.CI_VSPHERE_SSH_KEY }}
      PUBLIC_REPO: ${{ needs.authorize.outputs.public_repo == 'true' }}
    steps:
      - name: Set public registry env variables
        if: ${{ env.PUBLIC_REPO == 'true' }}
        run: |
          echo "REGISTRY_REPO=oci://ghcr.io/k0rdent/kcm/charts-ci" >> $GITHUB_ENV
          echo "IMG=ghcr.io/k0rdent/kcm/controller-ci:${{ needs.lint-test.outputs.version }}" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.lint-test.outputs.pr_merge_commit }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: false

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4

      - name: Load testing configuration
        if: ${{ needs.authorize.outputs.config != '' }}
        run: |
          echo -n "${{ needs.authorize.outputs.config }}" | base64 -d > test/e2e/config/config.yaml
          echo "Testing configuration was overwritten:"
          cat test/e2e/config/config.yaml

      - name: Run E2E tests
        env:
          GINKGO_LABEL_FILTER: 'provider:onprem'
          CLUSTER_DEPLOYMENT_PREFIX: ${{ needs.lint-test.outputs.clusterprefix }}
          VERSION: ${{ needs.lint-test.outputs.version }}
        run: |
          make test-e2e

      - name: Archive test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: support-bundles
          path: |
            *.tar.gz

  cleanup:
    name: Cleanup
    needs:
      - lint-test
      - provider-cloud-e2etest
      - authorize
    runs-on: ubuntu-latest
    if: ${{ always() && !contains(needs.provider-cloud-e2etest.result, 'skipped') && contains(needs.lint-test.result, 'success') }}
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.lint-test.outputs.pr_merge_commit }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: false

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Nuke AWS and Azure resources
        env:
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.CI_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CI_AWS_SECRET_ACCESS_KEY }}
          AZURE_REGION: westus2
          AZURE_SUBSCRIPTION_ID: ${{ secrets.CI_AZURE_SUBSCRIPTION_ID }}
          AZURE_TENANT_ID: ${{ secrets.CI_AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.CI_AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.CI_AZURE_CLIENT_SECRET }}
          CLUSTER_NAME: '${{ needs.lint-test.outputs.clusterprefix }}'
        run: |
          make dev-aws-nuke
          make dev-azure-nuke
