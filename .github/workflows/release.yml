name: Release KCM

on:
  push:
    tags:
      - "v*.*.*" # only the v-prefixed tags

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set version
        id: version
        run: |
          TAG=${{ github.ref_name }}
          echo "version=${TAG#v}" >> "$GITHUB_OUTPUT"

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Prepare KCM chart
        run: VERSION="${{ steps.version.outputs.version }}" make kcm-chart-release

      - name: Push charts to GHCR
        run: VERSION="${{ steps.version.outputs.version }}" REGISTRY_REPO="oci://ghcr.io/k0rdent/kcm/charts" make helm-push

      - name: Get Components Versions
        id: get_versions
        shell: bash
        run: |
          export_versions() {
              local curdir=$(pwd)
              find $curdir/templates/provider/cluster-api* $curdir/templates/provider/projectsveltos -name Chart.yaml | while read -r chart; do \
                  local dir=$(dirname "$chart"); \
                  local chart_name=$(basename "$dir" | tr '[:lower:]' '[:upper:]' | tr -c '[:alnum:]' '_'); \
                  local version=$(awk '/appVersion:/ {print $2}' "$chart" | tr -d '\n\r"' | tr -d "'" | sed 's/^v//'); \
                  echo "CHART_${chart_name%?}_VERSION=v$version" >> "$GITHUB_ENV"; \
              done

              echo "CHART_ORC_VERSION=$(awk '/containers:/{c=1} c&&/image:/{sub(/.*openstack-resource-controller:/,""); sub(/["} ]*$/, ""); print; exit}' $curdir/templates/provider/cluster-api-provider-openstack/templates/orc.yaml)" >> "$GITHUB_ENV";
          }

          export_versions

      - name: Clean dirty state after preparing KCM chart
        shell: bash
        run: git checkout templates/provider/

      - name: Create Release with GoReleaser
        uses: goreleaser/goreleaser-action@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REGISTRY: ghcr.io/k0rdent/kcm
          IMAGE_NAME: controller
          VERSION: ${{ steps.version.outputs.version }}
          SEGMENT_TOKEN: ${{ secrets.SEGMENT_TOKEN }}
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean --verbose
